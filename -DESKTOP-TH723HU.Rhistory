lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:500){
if( max(linhas.1[[i]]) < max(linhas.1[[1]])+lim2  &  min(linhas.1[[i]]) > min(linhas.1[[1]])-lim2  ) {
lines((density(linhas.1[[i]])))}else {
NULL
}
}
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
1/(1+exp(-rnorm(1,mu,sterr)))
sqrt(mu*(1-mu)/23)
linhas.1[[1]]
mu
mu1
sterr
lis$statistics[2]
sterr
Y1[[,1,1:3]]
Y1[[1,1:3]]
Y1
Y1[,1,1:3]
sum(Y1[,1,1]/0.1*100,Y1[,1,2]/0.1*100,Y1[,1,3]/0.1*100)
apply(cbind(Y1[,1,1]/0.1*100,Y1[,1,2]/0.1*100,Y1[,1,3]/0.1*100),1,sum)
apply(cbind(Y1[,1,1]/0.1*100,Y1[,1,2]/0.1*100,Y1[,1,3]/0.1*100),1,mean)
apply(cbind(Y1[,1,1]/0.1*100,Y1[,1,2]/0.1*100,Y1[,1,3]/0.1*100),1,mean)/570317
summary(apply(cbind(Y1[,1,1]/0.1*100,Y1[,1,2]/0.1*100,Y1[,1,3]/0.1*100),1,mean)/570317)
classic1<-(apply(cbind(Y1[,1,1]/0.1*100,Y1[,1,2]/0.1*100,Y1[,1,3]/0.1*100),1,mean)/570317)
mean(classic1)
classic1<-(apply(cbind(Y1[,1,1]/0.1*100,Y1[,1,2]/0.1*100,Y1[,1,3]/0.1*100),1,mean))
glm(c(classic1,570317-classic1)~1, family = binomial(link="logit"))
classic1
glm(c(570317-classic1,classic1)~1, family = binomial(link="logit"))
glm(cbind(classic1,570317-classic1)~1, family = binomial(link="logit"))
summary(glm(cbind(classic1,570317-classic1)~1, family = binomial(link="logit")))
1/(1+exp(-0.001679))
classic1<-(apply(cbind(Y1[,1,1]/0.1*100,Y1[,1,2]/0.1*100,Y1[,1,3]/0.1*100),1,mean)/570317)
classic1
sterr<-sqrt(mu*(1-mu)/length(classic1))
mu<-mean(classic1)
sterr<-sqrt(mu*(1-mu)/length(classic1))
sterr
mu
stderr(classic1)
sd(classic1)
sd(classic1)/sqrt(length(classic1))
sqrt(mu*(1-mu))/sqrt(length(classic1))
sterr
linhas.1<-list()
linhas.1[[1]]<-(rbinom(100000,5*10^5,  mu))
for (i in 2:500){
linhas.1[[i]]<-(rbinom(100000,5*10^5,  rnorm(1,mu,sterr)))
}
lim1<-150
lim2<-300
plot(density(linhas.1[[1]]),xlim=c(min(linhas.1[[1]])-lim1,max(linhas.1[[1]])+lim1),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:500){
if( max(linhas.1[[i]]) < max(linhas.1[[1]])+lim2  &  min(linhas.1[[i]]) > min(linhas.1[[1]])-lim2  ) {
lines((density(linhas.1[[i]])))}else {
NULL
}
}
linhas.1
rnorm(1,mu,sterr)
rnorm(500,mu,sterr)
linhas.1<-list()
linhas.1[[1]]<-(rbinom(100000,5*10^5,  mu))
for (i in 2:500){
linhas.1[[i]]<-(rbinom(100000,5*10^5,  max(rnorm(1,mu,sterr),0) ))
}
lim1<-150
lim2<-300
plot(density(linhas.1[[1]]),xlim=c(min(linhas.1[[1]])-lim1,max(linhas.1[[1]])+lim1),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:500){
if( max(linhas.1[[i]]) < max(linhas.1[[1]])+lim2  &  min(linhas.1[[i]]) > min(linhas.1[[1]])-lim2  ) {
lines((density(linhas.1[[i]])))}else {
NULL
}
}
sterr
rnorm(500,mu,sterr)<0
mean(rnorm(500,mu,sterr)<0)
lim1<-300
lim2<-600
plot(density(linhas.1[[1]]),xlim=c(min(linhas.1[[1]])-lim1,max(linhas.1[[1]])+lim1),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:500){
if( max(linhas.1[[i]]) < max(linhas.1[[1]])+lim2  &  min(linhas.1[[i]]) > min(linhas.1[[1]])-lim2  ) {
lines((density(linhas.1[[i]])))}else {
NULL
}
}
sqrt(0.4)
linhas<-list()
linhas[[1]]<-(rbinom(100000,5*10^5,  mu1))
for (i in 2:500){
linhas[[i]]<-(rbinom(100000,5*10^5,  1/(1+exp(-rnorm(1,lis$statistics[1],lis$statistics[2])))  ))
}
lim1<-150
lim2<-300
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:500){
if( max(linhas[[i]]) < max(linhas[[1]])+lim2  &  min(linhas[[i]]) > min(linhas[[1]])-lim2  ) {
lines((density(linhas[[i]])))}else {
NULL
}
}
1/(1+exp(-lis1$quantiles[1,1]))
mu1
lim1<-((1+exp(-lis1$quantiles[1,1])))*5*10^5
lim2<-((1+exp(-lis1$quantiles[1,5])))*5*10^5
lim1
lim2
((1+exp(-lis1$quantiles[1,5])))
((1+exp(-lis1$quantiles[1,1])))
ci1
(1/(1+exp(-lis1$quantiles[1,1])))
(1/(1+exp(-lis1$quantiles[1,5])))
lim1<-(1/(1+exp(-lis1$quantiles[1,1])))*5*10^5
lim2<-(1/(1+exp(-lis1$quantiles[1,5])))*5*10^5
lim1
lim2
linhas<-list()
linhas[[1]]<-(rbinom(100000,5*10^5,  mu1))
for (i in 2:500){
linhas[[i]]<-(rbinom(100000,5*10^5,  1/(1+exp(-rnorm(1,lis$statistics[1],lis$statistics[2])))  ))
}
lim1<-(1/(1+exp(-lis1$quantiles[1,1])))*5*10^5
lim2<-(1/(1+exp(-lis1$quantiles[1,5])))*5*10^5
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:500){
if( max(linhas[[i]]) < max(linhas[[1]])+lim2  &  min(linhas[[i]]) > min(linhas[[1]])-lim2  ) {
lines((density(linhas[[i]])))}else {
NULL
}
}
lim1<-(mu1-(1/(1+exp(-lis1$quantiles[1,1]))))*5*10^5
lim1
lim1<-(mu1-((1/(1+exp(-lis1$quantiles[1,1])))))*5*10^5
lim2<-(mu1+(1/(1+exp(-lis1$quantiles[1,5]))))*5*10^5
lim1
lim2
lim1<-(mu1+((1/(1+exp(-lis1$quantiles[1,1])))))*5*10^5
lim2<-(mu1-(1/(1+exp(-lis1$quantiles[1,5]))))*5*10^5
lim1
lim2
mu1
((1/(1+exp(-lis1$quantiles[1,1]))))
(mu1-((1/(1+exp(-lis1$quantiles[1,1])))))
(mu1-((1/(1+exp(-lis1$quantiles[1,1])))))*5*10^5
(mu1+(1/(1+exp(-lis1$quantiles[1,5]))))
lim1<-(mu1-((1/(1+exp(-lis1$quantiles[1,1])))))*5*10^5
lim2<-((1/(1+exp(-lis1$quantiles[1,5])))-mu1)*5*10^5
lim1
lim2
lim1<-(mu1-((1/(1+exp(-lis1$quantiles[1,1])))))*5*10^5
lim2<-((1/(1+exp(-lis1$quantiles[1,5])))-mu1)*5*10^5
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:500){
if( max(linhas[[i]]) < max(linhas[[1]])+lim2  &  min(linhas[[i]]) > min(linhas[[1]])-lim2  ) {
lines((density(linhas[[i]])))}else {
NULL
}
}
for (i in 2:100){
linhas[[i]]<-(rbinom(100000,5*10^5,  1/(1+exp(-rnorm(1,lis$statistics[1],lis$statistics[2])))  ))
}
lim1<-(mu1-((1/(1+exp(-lis1$quantiles[1,1])))))*5*10^5
lim2<-((1/(1+exp(-lis1$quantiles[1,5])))-mu1)*5*10^5
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:100){
if( max(linhas[[i]]) < max(linhas[[1]])+lim2  &  min(linhas[[i]]) > min(linhas[[1]])-lim2  ) {
lines((density(linhas[[i]])))}else {
NULL
}
}
linhas<-list()
linhas[[1]]<-(rbinom(100000,5*10^5,  mu1))
for (i in 2:50){
linhas[[i]]<-(rbinom(100000,5*10^5,  1/(1+exp(-rnorm(1,lis$statistics[1],lis$statistics[2])))  ))
}
lim1<-(mu1-((1/(1+exp(-lis1$quantiles[1,1])))))*5*10^5
lim2<-((1/(1+exp(-lis1$quantiles[1,5])))-mu1)*5*10^5
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:50){
if( max(linhas[[i]]) < max(linhas[[1]])+lim2  &  min(linhas[[i]]) > min(linhas[[1]])-lim2  ) {
lines((density(linhas[[i]])))}else {
NULL
}
}
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),ylim=c(0,0.05),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),ylim=c(0,0.01),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),ylim=c(0,0.5),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),ylim=c(0,0.5),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),ylim=c(0,0.01),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),ylim=c(0,0.001),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),ylim=c(0,0.001),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),ylim=c(0,0.009),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),ylim=c(0,0.003),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim1),ylim=c(0,0.005),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:50){
if( max(linhas[[i]]) < max(linhas[[1]])+lim2  &  min(linhas[[i]]) > min(linhas[[1]])-lim2  ) {
lines((density(linhas[[i]])))}else {
NULL
}
}
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim1,max(linhas[[1]])+lim2),ylim=c(0,0.005),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:50){
if( max(linhas[[i]]) < max(linhas[[1]])+lim2  &  min(linhas[[i]]) > min(linhas[[1]])-lim2  ) {
lines((density(linhas[[i]])))}else {
NULL
}
}
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])+lim1,max(linhas[[1]])+lim2),ylim=c(0,0.005),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:50){
if( max(linhas[[i]]) < max(linhas[[1]])+lim2  &  min(linhas[[i]]) > min(linhas[[1]])-lim2  ) {
lines((density(linhas[[i]])))}else {
NULL
}
}
plot(density(linhas[[1]]),xlim=c(min(linhas[[1]])-lim2,max(linhas[[1]])+lim1),ylim=c(0,0.005),
lty=2,lwd = 4,main="",xlab="Number of transfered cells",ylab="",yaxt='n', ann=T,cex=5)
for (i in 2:50){
if( max(linhas[[i]]) < max(linhas[[1]])+lim2  &  min(linhas[[i]]) > min(linhas[[1]])-lim2  ) {
lines((density(linhas[[i]])))}else {
NULL
}
}
lim.1<-(mu-1.96*sterr)5*10^5
lim.2<-(mu+1.96*sterr)5*10^5
lim.1<-(mu-1.96*sterr)*5*10^5
lim.2<-(mu+1.96*sterr)*5*10^5
lim.1
lim.2
(mu-1.96*sterr)
sterr
mu
sterr
sterr<-sqrt(mu*(1-mu)/length(classic1))
sterr
sterr<-sqrt((mu*(1-mu))/length(classic1))
sterr
lim.2<-max((mu+1.96*sterr)*5*10^5,0)
lim.2
lim.1
lim.1<-max((mu-1.96*sterr)*5*10^5,0)
lim.1
lim1
lim2
0.026/(1-0.026)
0.0037/(1-0.0037)
exp(-3.6+0.4^2/2)
exp((-3.6+0.4^2)/2)
exp(-3.6+0.16/2)
exp(-3.59+0.16/2)
exp(-3.61+0.16/2)
exp(-3.61+(0.39*0.39)/2)
exp(-5.59+(0.33*0.33)/2)
exp(-5.59+(0.33*0.33)/2)/(1+exp(-5.59+(0.33*0.33)/2))
exp(-3.61+(0.39*0.39)/2)/(1+exp(-3.61+(0.39*0.39)/2))
1/(1+exp(0))
1/(1+exp(-1))
1/(1+exp(1))
1/(1+exp(2))
1/(1+exp(3))
1/(1+exp(2.5))
1/(1+exp(2.6))
1/(1+exp(2.7))
1/(1+exp(2.4))
1/(1+exp(2.1))
exp(2.1)
exp(-2.1)
mea<-function(m,s){exp(m+s^2/2)/(1+exp(m+s^2/2))}
mea(c(-2,2),1)
mea(0,1)
mea(0,0)
mea(-3.6,0.4)
mea(-3.6,0.39)
mea(-5.59,0.33)
a<-rnorm(1000,-3.6,0.4)
mean(a)
mean(1/(1+exp(-a)))
a<-rnorm(10000,-3.6,0.4)
mean(1/(1+exp(-a)))
a<-rnorm(10000,-5.59,0.33)
mean(1/(1+exp(-a)))
confint(a)
a<-rnorm(1000000,-5.59,0.33)
mean(1/(1+exp(-a)))
sd(a)
sd(1/(1+exp(-a)))
quantile((1/(1+exp(-a))),0.5)
quantile((1/(1+exp(-a))),0.975)
quantile((1/(1+exp(-a))),0.025)
lis
#Installing and loading Packages
#Install packages
#Packages to be used
packages<-c("readxl","here","tidyverse","ggplot2","gridExtra","knitr","BRugs","coda","rjags")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
load("C:/Users/defr001/OneDrive/Documents/Projeto_posdoc/Output/simula_final_out21_4_21.RData")
lis1<-summary(mcmc1)
lis1
View(mcmc1)
mcmc1[[1]]
mcmc1[[1,1]]
mcmc1[[1]][1]
mcmc1[[1]][2]
mcmc1[[1]][1,1]
mcmc1[[1]][1:3,1]
mean(mcmc1[[1]][,1])
median(mcmc1[[1]][,1])
summary(mcmc1[[1]][,1])
summary(1/(1+exp(-mcmc1[[1]][,1])))
summary(1/(1+exp(-mcmc1[[1]][,2])))
mea
#Mean function
mea<-function(m,s){exp(m+s^2/2)/(1+exp(m+s^2/2))}
mea(-3.6,0.4)
summary(1/(1+exp(-mcmc1[[1]][,1])))
summary(1/(1+exp(-mcmc1[[2]][,1])))
summary(1/(1+exp(-mcmc1[[3]][,1])))
kable(cbind(round(lis1$statistics[,1:2],2),round(lis1$quantiles,2)))
summary(mcmc1)
mea(-3.9567,0.3963)
mea(-3.5967,0.3963)
mea(-3.6,0.4)
summary(1/(1+exp(-mcmc1[[1:3]][,1])))
summary(1/(1+exp(-mcmc1[[1]][,1])))
install.packages("rgl")
library(rgl)
x<-1/(1+exp(-mcmc1[[1]][,1]))
y<-1/(1+exp(-mcmc1[[1]][,2]))
z<-mea(x,y)
persp3d(x,y,z,col="blue")
persp3d(x,y,z,col="blue")
x<-1/(1+exp(-seq(-2,2,0.01)))
x
x<-seq(-2,2,0.01)
y<-seq(0,4,0.01)
z<-mea(x,y)
persp3d(x,y,z,col="blue")
length(x)
length(y)
length(z)
g <- expand.grid(x = x, y = y)
g<-mea(x,y)
g
persp3d(x,y,z,col="blue")
wireframe(z ~ x * y, g, drape = TRUE,
aspect = c(3,1), colorkey = TRUE)
?outer()
z <- outer(x,y, function(x,y) exp(m+s^2/2)/(1+exp(m+s^2/2)))
z <- outer(x,y, function(x,y) exp(x+y^2/2)/(1+exp(x+y^2/2)))
z <- outer(x,y, function(x,y) exp(x+y^2/2)/(1+exp(x+y^2/2)))
persp(x,y,z)
persp3d(x,y,z,col="blue")
x<-seq(-5,5,len=100)
y<-seq(0,5,len=100)
z <- outer(x,y, function(x,y) exp(x+y^2/2)/(1+exp(x+y^2/2)))
persp(x,y,z)
persp3d(x,y,z,col="gray")
x<-seq(-5,5,len=100)
y<-seq(0,5,len=100)
z <- outer(x,y, function(x,y) exp(x+y^2/2)/(1+exp(x+y^2/2)))
persp(x,y,z)
persp3d(x,y,z,col="gray")
mea(0.4,0.16)
mea(0.8,1.44)
mea(0.4,1.44)
mea(0.4,sqrt(1.44))
mea(0.8,sqrt(1.44))
mea(0.4,sqrt(0.16))
x1<-seq(-5,5,len=100)
y1<-seq(0,5,len=100)
z1 <- outer(x1,y1, function(x1,y1) exp(x1+y1^2/2)/(1+exp(x1+y1^2/2))*100 )
persp(x1,y1,z1)
#persp(x1,y1,z2)
persp3d(x,y,z1,col="black")
z2<- outer(x1,y1, function(x1,y1) exp(x1+y1^2/2)/(1+exp(x1+y1^2/2))*(1-(exp(x1+y1^2/2)/(1+exp(x1+y1^2/2))))*100)
persp(x1,y1,z2)
persp3d(x,y,z2,col="black")
z1 <- outer(x1,y1, function(x1,y1) sqrt(exp(x1+y1^2/2)/(1+exp(x1+y1^2/2))*(1-(exp(x1+y1^2/2)/(1+exp(x1+y1^2/2))))) )
persp(x1,y1,z1)
persp3d(x,y,z1,col="black")
save.image("C:/Users/defr001/OneDrive/Documents/Projeto_posdoc/Output/simula_final_out26_4_21.RData")
?persp3d()
persp3d(x,y,z,col="gray",xlab = expression(italic(mu)), ylab = expression(italic(sigma)),
zlab = expression(paste("E(",italic(theta),")")), add = FALSE, aspect = !add)
persp3d(x,y,z,col="gray",xlab = expression(italic(mu)), ylab = expression(italic(sigma)),
zlab = expression(paste("E(",italic(theta),")")))
# (4) A globe
lat <- matrix(seq(90, -90, len = 50)*pi/180, 50, 50, byrow = TRUE)
long <- matrix(seq(-180, 180, len = 50)*pi/180, 50, 50)
r <- 6378.1 # radius of Earth in km
x <- r*cos(lat)*cos(long)
y <- r*cos(lat)*sin(long)
z <- r*sin(lat)
open3d()
persp3d(x, y, z, col = "white",
texture = system.file("textures/worldsmall.png", package = "rgl"),
specular = "black", axes = FALSE, box = FALSE, xlab = "", ylab = "", zlab = "",
normal_x = x, normal_y = y, normal_z = z)
if (!rgl.useNULL())
play3d(spin3d(axis = c(0, 0, 1), rpm = 16), duration = 2.5)
## Not run:
# This looks much better, but is slow because the texture is very big
persp3d(x, y, z, col = "white",
texture = system.file("textures/world.png", package = "rgl"),
specular = "black", axes = FALSE, box = FALSE, xlab = "", ylab = "", zlab = "",
normal_x = x, normal_y = y, normal_z = z)
## End(Not run)
library(rjags)
citation("rjags")
load("C:/Users/defr001/OneDrive/Documents/Projeto_posdoc/Output/simula_final_out26_4_21.RData")
# Valor esperado para p
x<-seq(-5,5,len=100)
y<-seq(0,5,len=100)
z <- outer(x,y, function(x,y) exp(x+y^2/2)/(1+exp(x+y^2/2)))
persp(x,y,z)
persp3d(x,y,z,col="gray",xlab = expression(italic(mu)), ylab = expression(italic(sigma)),
zlab = expression(paste("E(",italic(theta),")")))
#Packages to be used
packages<-c("readxl","here","tidyverse","ggplot2","gridExtra","knitr","BRugs","coda","rjags","rgl")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
#Mean function
mea<-function(m,s){exp(m+s^2/2)/(1+exp(m+s^2/2))}
# Valor esperado para p
x<-seq(-5,5,len=100)
y<-seq(0,5,len=100)
z <- outer(x,y, function(x,y) exp(x+y^2/2)/(1+exp(x+y^2/2)))
persp(x,y,z)
persp3d(x,y,z,col="gray",xlab = expression(italic(mu)), ylab = expression(italic(sigma)),
zlab = expression(paste("E(",italic(theta),")")))
persp3d(x,y,z,col="gray",xlab = expression(italic(mu)), ylab = expression(italic(sigma)),
zlab = expression(paste("E(",italic(theta),")")),cex=2)
persp3d(x,y,z,col="gray",xlab = expression(italic(mu)), ylab = expression(italic(sigma)),
zlab = expression(paste("E(",italic(theta),")")),cex=5)
persp3d(x,y,z,col="gray",xlab = expression(italic(mu)), ylab = expression(italic(sigma)),
zlab = expression(paste("E(",italic(theta),")")),theta = 30, phi = 30, expand = 0.5)
persp3d(x,y,z,col="gray",xlab = expression(italic(mu)), ylab = expression(italic(sigma)),
zlab = expression(paste("E(",italic(theta),")")),col.palette = heat.colors, phi = 30, theta = 225,
box = TRUE, border = NA, shade = .4)
persp3d(x,y,z,xlab = expression(italic(mu)), ylab = expression(italic(sigma)),
zlab = expression(paste("E(",italic(theta),")")),col.palette = heat.colors, phi = 30, theta = 225,
box = TRUE, border = NA, shade = .4)
persp3d(x,y,z,theta = 30, phi = 30, expand = 0.5,xlab = expression(italic(mu)), ylab = expression(italic(sigma)),
zlab = expression(paste("E(",italic(theta),")")))
